# search_matching_model_dual_agents_dynamic.jl
# Full model: parameterized, modular, variable leisure support - new calibration to accurately capture dyanmic nature of shock (calibrated on average observed change)
# Nash Bargaining still not fully included.

using Printf, Plots, CairoMakie, Statistics

# Parameters
Î²    = 0.99
Î´    = 0.02
p_R  = 0.5
Î±    = 0.5
Ï†    = 0.5
y_pre = 2.0
y_post = 2.0
b_R_pre = 0.28
b_R_post = 1 * b_R_pre
b_N = 0.0
l_u_R_pre, l_u_N_pre = 0.1, 0.1
l_u_R_post, l_u_N_post = 0.1, 0.1
c_vac = 0.21
wge = 0.8

f_N_target_pre = 0.10
f_R_target_pre = 0.0866
f_N_target_post = 0.0821
f_R_target_post = 0.0312

T = 30
shock_start, shock_end = 7, 13

struct ValueTuple
    W_R::Float64; U_R::Float64; W_N::Float64; U_N::Float64
end

function matching_rates(Î¸, Î¼)
    f = Î¼ * Î¸^(1 - Î±); q = Î¼ * Î¸^(-Î±)
    return (f=min(f,1.0), q=min(q,1.0))
end

exogenous_wage = true
function nash_wage(y, bÌ„)
    exogenous_wage ? wge : Ï† * y + (1 - Ï†) * bÌ„
end

function firm_surplus(y, w)
    surplus = y - w
    if surplus <= 0
        error("Firm surplus non-positive: y=$y, w=$w")
    end
    return surplus / (1 - Î² * (1 - Î´))
end

function solve_tightness(Î¼, y, bÌ„)
    w = nash_wage(y, bÌ„)
    J = firm_surplus(y, w)
    Î¸ = ((Î² * Î¼ * J) / c_vac)^(1 / Î±)
    return Î¸, w
end

function job_finding_rates(Î³, Î¼, y, b_R, l_u_R, l_u_N)
    bÌ„ = p_R * b_R + (1 - p_R)*b_N + (p_R*l_u_R + (1-p_R)*l_u_N)
    Î¸, w = solve_tightness(Î¼, y, bÌ„)
    p_contact = matching_rates(Î¸, Î¼).f

    W_R, U_R = w, b_R + l_u_R
    for _ in 1:500
        W_R_new = w + Î²*((1-Î´)*W_R + Î´*U_R)
        U_R_new = b_R + l_u_R + Î²*(p_contact*W_R + (1-p_contact)*U_R)
        if abs(W_R_new - W_R) < 1e-8 && abs(U_R_new - U_R) < 1e-8
            break
        end
        W_R, U_R = W_R_new, U_R_new
    end

    W_N, U_N = w, b_N + l_u_N
    for _ in 1:500
        W_N_new = w + Î²*((1-Î´)*W_N + Î´*U_N)
        U_N_new = b_N + l_u_N + Î²*(p_contact*W_N + (1-p_contact)*U_N)
        if abs(W_N_new - W_N) < 1e-8 && abs(U_N_new - U_N) < 1e-8
            break
        end
        W_N, U_N = W_N_new, U_N_new
    end

    s_R = Î² * p_contact * (W_R - U_R) / Î³
    s_N = Î² * p_contact * (W_N - U_N) / Î³
    f_R = s_R * p_contact; f_N = s_N * p_contact

    return f_N, f_R, s_N, s_R, W_N, W_R, U_N, U_R, Î¸, w
end

function compute_value_path(Î³_pre, Î¼_pre, Î³_post, Î¼_post,
                            y_pre, y_post, b_R_pre, b_R_post,
                            l_u_R_pre, l_u_R_post, l_u_N_pre, l_u_N_post)

    value_path = Vector{ValueTuple}(undef, T+1)

    _, _, _, _, W_N_ss, W_R_ss, U_N_ss, U_R_ss, _, _ =
        job_finding_rates(Î³_pre, Î¼_pre, y_pre, b_R_pre, l_u_R_pre, l_u_N_pre)
    value_path[T+1] = ValueTuple(W_R_ss, U_R_ss, W_N_ss, U_N_ss)

    for t in T:-1:1
        V_next = value_path[t+1]
        if t >= shock_end+1
            Î³_t, Î¼_t, y_t, b_R_t = Î³_pre, Î¼_pre, y_pre, b_R_pre
            l_u_R_t, l_u_N_t = l_u_R_pre, l_u_N_pre
        elseif t >= shock_start
            Î³_t, Î¼_t, y_t, b_R_t = Î³_post, Î¼_post, y_post, b_R_post
            l_u_R_t, l_u_N_t = l_u_R_post, l_u_N_post
        else
            Î³_t, Î¼_t, y_t, b_R_t = Î³_pre, Î¼_pre, y_pre, b_R_pre
            l_u_R_t, l_u_N_t = l_u_R_pre, l_u_N_pre
        end

        bÌ„ = p_R*b_R_t + (1 - p_R)*b_N + (p_R*l_u_R_t + (1-p_R)*l_u_N_t)
        Î¸, w_t = solve_tightness(Î¼_t, y_t, bÌ„)
        p_contact = matching_rates(Î¸, Î¼_t).f

        W_R_t = w_t + Î²*((1-Î´)*V_next.W_R + Î´*V_next.U_R)
        U_R_t = b_R_t + l_u_R_t + Î²*(p_contact*V_next.W_R + (1-p_contact)*V_next.U_R)

        W_N_t = w_t + Î²*((1-Î´)*V_next.W_N + Î´*V_next.U_N)
        U_N_t = b_N + l_u_N_t + Î²*(p_contact*V_next.W_N + (1-p_contact)*V_next.U_N)

        value_path[t] = ValueTuple(W_R_t, U_R_t, W_N_t, U_N_t)
    end

    return value_path
end

function calibrate_grid_static(y, b_R, l_u_R, l_u_N, f_N_target, f_R_target)
    Î³_vals = range(0.001, stop=1.0, length=100)
    Î¼_vals = range(0.05, stop=1.5, length=100)
    residuals = fill(Inf, length(Î³_vals), length(Î¼_vals))
    best_Î³, best_Î¼, min_residual = NaN, NaN, Inf

    for (i, Î³) in enumerate(Î³_vals), (j, Î¼) in enumerate(Î¼_vals)
        try
            f_N, f_R, _, _, _, _, _, _, _ = job_finding_rates(Î³, Î¼, y, b_R, l_u_R, l_u_N)
            res = (f_N - f_N_target)^2 + (f_R - f_R_target)^2
            residuals[i, j] = sqrt(res)
            if res < min_residual
                min_residual = res
                best_Î³, best_Î¼ = Î³, Î¼
            end
        catch
            residuals[i, j] = NaN
        end
    end

    println("âœ… Pre-COVID steady-state calibration:")
    println("   Î³=$(best_Î³), Î¼=$(best_Î¼), residual norm=$(sqrt(min_residual))")

    return best_Î³, best_Î¼, residuals, Î³_vals, Î¼_vals
end

function calibrate_grid(y_pre, b_R_pre, y_post, b_R_post,
                        f_N_target_pre, f_R_target_pre,
                        f_N_target_post, f_R_target_post,
                        l_u_R_pre, l_u_R_post, l_u_N_pre, l_u_N_post)
    Î³_vals = range(0.001, stop=1.0, length=30)
    Î¼_vals = range(0.05, stop=1.5, length=30)

    # Step 1: Pre-COVID calibration
    Î³_pre, Î¼_pre, _, _, _ = calibrate_grid_static(y_pre, b_R_pre, l_u_R_pre, l_u_N_pre,f_N_target_pre, f_R_target_pre)

    # Step 2: Post-COVID dynamic calibration
    best_Î³_post, best_Î¼_post, min_residual_post = NaN, NaN, Inf

    for (i, Î³_post) in enumerate(Î³_vals), (j, Î¼_post) in enumerate(Î¼_vals)
        try
            path = compute_value_path(Î³_pre, Î¼_pre, Î³_post, Î¼_post,
                                      y_pre, y_post, b_R_pre, b_R_post,
                                      l_u_R_pre, l_u_R_post, l_u_N_pre, l_u_N_post)
            f_N_path, f_R_path = simulate_job_finding_rates(path,
                Î³_pre, Î¼_pre, Î³_post, Î¼_post,
                y_pre, y_post, b_R_pre, b_R_post,
                l_u_R_pre, l_u_R_post, l_u_N_pre, l_u_N_post)

            f_N_avg = mean(f_N_path[shock_start:shock_end])
            f_R_avg = mean(f_R_path[shock_start:shock_end])
            res = (f_N_avg - f_N_target_post)^2 + (f_R_avg - f_R_target_post)^2

            if res < min_residual_post
                min_residual_post = res
                best_Î³_post, best_Î¼_post = Î³_post, Î¼_post
            end
        catch e
            @warn "Calibration error at Î³_post=$Î³_post, Î¼_post=$Î¼_post: $e"
        end
    end

    println("âœ… Dynamic calibration complete:")
    println("   Î³_pre=$(Î³_pre), Î¼_pre=$(Î¼_pre)")
    println("   Î³_post=$(best_Î³_post), Î¼_post=$(best_Î¼_post)")
    return Î³_pre, Î¼_pre, best_Î³_post, best_Î¼_post, Î³_vals, Î¼_vals
end

# Compare Steady States for Pre-COVID, Post-COVID, and Benefit-Only Scenarios
function compare_steady_states()
    println("\nðŸ“Œ Steady State Comparison Table:")

    # Pre-COVID full calibration
    f_N_pre, f_R_pre, s_N_pre, s_R_pre, W_N_pre, W_R_pre, U_N_pre, U_R_pre, Î¸_pre, w_pre =
        job_finding_rates(Î³_pre, Î¼_pre, y_pre, b_R_pre,l_u_R_pre,l_u_N_pre)

    # Post-COVID full calibration
    f_N_post, f_R_post, s_N_post, s_R_post, W_N_post, W_R_post, U_N_post, U_R_post, Î¸_post, w_post =
        job_finding_rates(Î³_post, Î¼_post, y_post, b_R_post,l_u_R_post,l_u_N_post)

    # Benefit-only shock: keep Î³, Î¼ at pre-COVID levels
    f_N_benefit, f_R_benefit, s_N_benefit, s_R_benefit, W_N_benefit, W_R_benefit, U_N_benefit, U_R_benefit, Î¸_benefit, w_benefit =
        job_finding_rates(Î³_pre, Î¼_pre, y_post, b_R_post,l_u_R_pre,l_u_N_pre)

    # Print formatted table
    println("| Metric    | Pre-COVID | Post-COVID | Benefit Only |")
    println("|-----------|------------|------------|--------------|")
    @printf("| f_N       | %.4f     | %.4f     | %.4f        |\n", f_N_pre, f_N_post, f_N_benefit)
    @printf("| f_R       | %.4f     | %.4f     | %.4f        |\n", f_R_pre, f_R_post, f_R_benefit)
    @printf("| s_N       | %.4f     | %.4f     | %.4f        |\n", s_N_pre, s_N_post, s_N_benefit)
    @printf("| s_R       | %.4f     | %.4f     | %.4f        |\n", s_R_pre, s_R_post, s_R_benefit)
    @printf("| W_N       | %.4f     | %.4f     | %.4f        |\n", W_N_pre, W_N_post, W_N_benefit)
    @printf("| W_R       | %.4f     | %.4f     | %.4f        |\n", W_R_pre, W_R_post, W_R_benefit)
    @printf("| U_N       | %.4f     | %.4f     | %.4f        |\n", U_N_pre, U_N_post, U_N_benefit)
    @printf("| U_R       | %.4f     | %.4f     | %.4f        |\n", U_R_pre, U_R_post, U_R_benefit)
    @printf("| Î¸         | %.4f     | %.4f     | %.4f        |\n", Î¸_pre, Î¸_post, Î¸_benefit)
    @printf("| w         | %.4f     | %.4f     | %.4f        |\n", w_pre, w_post, w_benefit)
    println()
end

function average_job_finding_rates(f_N::Vector, f_R::Vector)
    # Periods
    pre_period = 1:(shock_start-1)
    shock_period = shock_start:shock_end
    post_period = (shock_end+1):T

    # Average job finding rates (%)
    avg_f_N_pre = mean(f_N[pre_period]) * 100
    avg_f_R_pre = mean(f_R[pre_period]) * 100

    avg_f_N_shock = mean(f_N[shock_period]) * 100
    avg_f_R_shock = mean(f_R[shock_period]) * 100

    avg_f_N_post = mean(f_N[post_period]) * 100
    avg_f_R_post = mean(f_R[post_period]) * 100

    println("\nðŸ“Š Average Job-Finding Rates (in %):")
    println("| Period     | f_N   | f_R   |")
    println("|------------|-------|-------|")
    @printf("| Pre-shock  | %5.2f | %5.2f |\n", avg_f_N_pre, avg_f_R_pre)
    @printf("| Shock      | %5.2f | %5.2f |\n", avg_f_N_shock, avg_f_R_shock)
    @printf("| Post-shock | %5.2f | %5.2f |\n", avg_f_N_post, avg_f_R_post)
end