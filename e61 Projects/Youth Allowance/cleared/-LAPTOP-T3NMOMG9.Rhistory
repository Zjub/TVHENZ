Synth
)
SCdata <- read_csv("SCdata.csv")[,1:8]
##### Raw levels
### Synth example
basedata <- as.data.frame(SCdata) %>% mutate(time_index = rep(seq(1,144,by=1),times=11))
balancecheck <- basedata %>% pivot_wider(names_from = age,values_from = N)
dataprep.out <-
dataprep(
basedata,
dependent = "N",
predictors = c("gender1ratio","NSWratio","VICratio","Queenratio","eduratio"),
time.predictors.prior = 1:72, #as.Date("2006-07-01"):as.Date("2012-06-01"),
unit.variable = "age",
time.variable = "time_index",
treatment.identifier = 21,
controls.identifier = c(22:28),
time.optimize.ssr = 1:72,
time.plot = 1:144 #as.Date("2006-07-01"):as.Date("2018-06-01")
)
synth.out <- synth(data.prep.obj = dataprep.out)
pdf("templevel.pdf")
path.plot(synth.out, dataprep.out)
abline(v   = 73,
lty = 2)
abline(v   = 85,
lty = 2)
dev.off()
pdf("templevelgap.pdf")
gaps.plot(synth.out, dataprep.out)
abline(v   = 73,
lty = 2)
abline(v   = 85,
lty = 2)
abline(h = -15000,
lty = 3)
dev.off()
## Below is only in SCtools now - which isn't working https://bcastanho.github.io/install_sctools
# install.packages(c("cvTools", "furrr", "stringr","ggplot2",
#                     "stats","dplyr","magrittr","purrr"))
library(devtools)
install_github('bcastanho/SCtools', repos =NULL, force = T)
library(SCtools)
placebos <- generate.placebos(dataprep.out, synth.out, Sigf.ipop = 3)
plot_placebos(placebos)
mspe.plot(placebos, discard.extreme = TRUE, mspe.limit = 1, plot.hist = TRUE)
### gsyth example
##### Index
# Part of the weighting is due to the level similarity between different groups - also useful to look at how these change if you use the proportion.
Base <- basedata %>% filter(month_year == "2006-07-01") %>% select(age,N)
basedata1 <- basedata %>% left_join(Base, by="age") %>% mutate(Prop = N.x/N.y)
### Synth example
dataprep.out2 <-
dataprep(
basedata1,
dependent = "Prop",
predictors = c("gender1ratio","NSWratio","VICratio","Queenratio","eduratio"),
time.predictors.prior = 1:72, #as.Date("2006-07-01"):as.Date("2012-06-01"),
unit.variable = "age",
time.variable = "time_index",
treatment.identifier = 21,
controls.identifier = c(22:28),
time.optimize.ssr = 1:72,
time.plot = 1:144 #as.Date("2006-07-01"):as.Date("2018-06-01")
)
synth.out2 <- synth(data.prep.obj = dataprep.out2)
pdf("tempprop.pdf")
path.plot(synth.out2, dataprep.out2)
abline(v   = 73,
lty = 2)
abline(v   = 85,
lty = 2)
dev.off()
## Undertake placebo tests on the constrained estimate.
# Test removing 22 year olds, adding 20 year olds etc
dataprep.out2wide <-
dataprep(
basedata1,
dependent = "Prop",
predictors = c("gender1ratio","NSWratio","VICratio","Queenratio","eduratio"),
time.predictors.prior = 1:72, #as.Date("2006-07-01"):as.Date("2012-06-01"),
unit.variable = "age",
time.variable = "time_index",
treatment.identifier = 21,
controls.identifier = c(19:20,22:28),
time.optimize.ssr = 1:72,
time.plot = 1:144 #as.Date("2006-07-01"):as.Date("2018-06-01")
)
synth.out2wide <- synth(data.prep.obj = dataprep.out2wide)
path.plot(synth.out2wide, dataprep.out2wide)
abline(v   = 73,
lty = 2)
abline(v   = 85,
lty = 2)
# Placebo in space (between units)
placebos2 <- generate.placebos(dataprep.out2, synth.out2, Sigf.ipop = 3)
plot_placebos(placebos2)
gap <- unique(basedata$month_year)
for (i in 1:7){
temp <- placebos2$df[i] - placebos2$df[i+7]
gap <- cbind(gap,temp)
}
gap <- cbind(gap,s21 = (placebos2$df[15]-placebos2$df[16]))
colnames(gap)[1] <- "date"
gapdf <- gap %>% pivot_longer(!date,names_to = "variable",values_to = "value")
# Different visulation of the placebo in time tests
ggplot(gapdf,aes(x=date,y=value,colour=variable)) + geom_line() + geom_vline(xintercept = unique(gap$date)[73],linetype = 2,colour="red")+ geom_vline(xintercept = unique(gap$date)[85],linetype = 2,colour="red") + geom_hline(yintercept = 0)
# Placebo in time (checking intervention date)
install.packages("pacman")
### Goal is to create a script that constructs trend separation and job finding rates.
# Clearing memory and setting up packages
rm(list=ls())
.libPaths(new = 'C:/Rpackage')
# source("https://trimweb.rba.gov.au/record/6808794")
# artifactory::setup_artifactory()
install.packages("pacman")
library(pacman)
p_load(
tidyverse,
data.table,
collapse,
readabs,
readr,
readxl,
mFilter,
zoo
)
# Pull in the gross flows data using readabs
# First do the current weights UR for a comparison
lfdf <- read_lfs_grossflows(weights = "current")
lf <- lfdf %>% filter(lfs_current %in% c("Employed full-time","Employed part-time","Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date) %>% summarise(number = sum(persons))
unemployed <- lfdf %>% filter(lfs_current %in% c("Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date) %>% summarise(number_une = sum(persons))
UR <- left_join(unemployed,lf,by="date") %>% mutate(UR = number_une/number)
ggplot(lf,aes(x=date,y=number)) + geom_line()
ggplot(UR,aes(x=date,y=UR)) + geom_line()
#write.csv(UR,"C:/Users/141823/Documents/NAIRU/Data/Current_data.csv")
lf_curr_age <- lfdf %>% filter(lfs_current %in% c("Employed full-time","Employed part-time","Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date,age) %>% summarise(number = sum(persons))
unemployed_curr_age <- lfdf %>% filter(lfs_current %in% c("Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date,age) %>% summarise(number_une = sum(persons))
UR_curr_age <- left_join(unemployed_curr_age,lf_curr_age,by=c("date","age")) %>% mutate(UR = number_une/number) %>% ungroup() %>% group_by(date) %>% mutate(total = sum(number),LF_share = number/total)
#write.csv(UR_curr_age,"C:/Users/141823/Documents/NAIRU/Data/Current_age_data.csv")
### Do a shift share analysis of raw unemployment rate between June 2005 and June 2018 - purpose of raw is that it is linearly decomposable
# [To be coded]
### Now use job flows data to look at trends and implied secular unemployment rate
# We have Full and Part-Time transitions as well as to NILF and unemployed. These counts are by date, age, state, and sex - allowing a decomposition of all of them using public data.
dfgf <- read_lfs_grossflows(weights = "previous")
# Dataset focused on the five year age groups only
gfage <- dfgf %>% filter(!age == "65 years and over") %>% mutate(age2 = case_when(
substr(age,1,5) %in% c("15-19","20-24") ~ "15-24",
substr(age,1,5) %in% c("25-29","30-34") ~ "25-34",
substr(age,1,5) %in% c("35-39","40-44") ~ "35-44",
substr(age,1,5) %in% c("45-49","50-54") ~ "45-54",
substr(age,1,5) %in% c("55-59","60-64") ~ "55-64",
)) %>% group_by(date,lfs_current,lfs_previous,age2) %>% summarise(number = sum(persons))
# Labour force shares, but using the same weights as the flows
lfage <- gfage %>% filter(lfs_current %in% c("Employed full-time","Employed part-time","Unemployed")) %>% group_by(date,age2) %>% summarise(number = sum(number), .groups = 'drop') %>% group_by(date) %>% mutate(total=sum(number),prop=number/total)
# Initial run dropping everything into two transitions - employed to unemployed
sepage <- gfage %>% ungroup() %>% mutate(Empcur = ifelse(substr(lfs_current,1,3) == "Emp",1,0),Emppre = ifelse(substr(lfs_previous,1,3) == "Emp",1,0),Unecur = ifelse(substr(lfs_current,1,3) == "Une",1,0),Unepre = ifelse(substr(lfs_previous,1,3) == "Une",1,0)) %>% filter(Emppre == 1) %>% mutate(l_curr = ifelse(Empcur == 1, "Employed",ifelse(Unecur == 1,"Unemployed","Other")),l_pre = ifelse(Emppre == 1, "Employed",ifelse(Unepre == 1,"Unemployed","Other"))) %>% group_by(date,l_pre,l_curr,age2) %>% summarise(number = sum(number))
# Get all the people who were previously employed - irrespective of where they transition
preemp_emp1 <- sepage %>% ungroup() %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preemp_totals <- sepage %>%
ungroup() %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preemp_emp <- bind_rows(preemp_emp1, preemp_totals)
preemp_emp <- preemp_emp %>% arrange(date, l_pre, age2)
setDT(preemp_emp)
# Get people previously employed who are now unemployed
preemp_une1 <- sepage %>% ungroup() %>% filter(l_curr == "Unemployed") %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preemp_utotals <- sepage %>%
ungroup() %>%
filter(l_curr == "Unemployed") %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preemp_une <- bind_rows(preemp_une1, preemp_utotals)
preemp_une <- preemp_une %>% arrange(date, l_pre, age2)
setDT(preemp_une)
preemp <- preemp_une[preemp_emp,on = .c("date","age2")] %>% mutate(sep_rate = number/i.number)
ggplot(preemp,aes(x=date,y=sep_rate,colour=age2)) + geom_line() + labs(title="Separation rate by age")
#write_csv(preemp,"C:/Users/141823/Documents/NAIRU/Data/SR_age.csv")
# Unemployed to employed.
jfage <- gfage %>% ungroup() %>% mutate(Empcur = ifelse(substr(lfs_current,1,3) == "Emp",1,0),Emppre = ifelse(substr(lfs_previous,1,3) == "Emp",1,0),Unecur = ifelse(substr(lfs_current,1,3) == "Une",1,0),Unepre = ifelse(substr(lfs_previous,1,3) == "Une",1,0)) %>% filter(Unepre == 1) %>% mutate(l_curr = ifelse(Empcur == 1, "Employed",ifelse(Unecur == 1,"Unemployed","Other")),l_pre = ifelse(Emppre == 1, "Employed",ifelse(Unepre == 1,"Unemployed","Other"))) %>% group_by(date,l_pre,l_curr,age2) %>% summarise(number = sum(number))
# Get all people who were previously unemployed
preune_une1 <- jfage %>% ungroup() %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preune_totals <- jfage %>%
ungroup() %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preune_une <- bind_rows(preune_une1, preune_totals)
preune_une <- preune_une %>% arrange(date, l_pre, age2)
setDT(preune_une)
# Get all people who were previously unemployed and became employed
preune_emp1 <- jfage %>% ungroup() %>% filter(l_curr == "Employed") %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preune_etotals <- jfage %>%
ungroup() %>%
filter(l_curr == "Employed") %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preune_emp <- bind_rows(preune_emp1, preune_etotals)
preune_emp <- preune_emp %>% arrange(date, l_pre, age2)
setDT(preune_emp)
preune <- preune_emp[preune_une,on = .c("date","age2")] %>% mutate(jf_rate = number/i.number)
ggplot(preune,aes(x=date,y=jf_rate,colour=age2)) + geom_line() + labs(title="Job-finding rate by age")
#write_csv(preune,"C:/Users/141823/Documents/NAIRU/Data/JFR_age.csv")
#### Generate Trends
## HP trends
age_groups <- unique(preune$age2)
# JFR HP trends
get_JFR_hpfilter_plot <- function(age_group) {
# Get the time series
ts_data <- ts(preune[preune$age2 == age_group,]$jf_rate, start = c(2003,6), frequency = 12)
# Apply the Hodrick-Prescott filter
hp_result <- hpfilter(ts_data, freq = 1600) # adjust freq parameter as necessary
# Plot the original series and trend
p <- ggplot() +
geom_line(aes(x = time(ts_data), y = ts_data), colour = "blue") +
geom_line(aes(x = time(hp_result$trend), y = hp_result$trend), colour = "red") +
labs(x = "Time", y = "Rate", title = paste("Original Series and HP Filter Trend for JFR age group", age_group)) +
theme_minimal()
print(p) # print the plot
# Return the HP filter result
return(hp_result)
}
# Use lapply to apply this function to each age group
png(filename="C:/Users/141823/Documents/NAIRU/Images/JFR.png")
JFR_hp_list <- lapply(age_groups, get_JFR_hpfilter_plot)
dev.off()
# Assign names to the list elements
names(JFR_hp_list) <- age_groups
# Sep rate HP
get_SR_hpfilter_plot <- function(age_group) {
# Get the time series
ts_data <- ts(preemp[preemp$age2 == age_group,]$sep_rate, start = c(2003,6), frequency = 12)
# Apply the Hodrick-Prescott filter
hp_result <- hpfilter(ts_data, freq = 1600) # adjust freq parameter as necessary
# Plot the original series and trend
p <- ggplot() +
geom_line(aes(x = time(ts_data), y = ts_data), colour = "blue") +
geom_line(aes(x = time(hp_result$trend), y = hp_result$trend), colour = "red") +
labs(x = "Time", y = "Rate", title = paste("Original Series and HP Filter Trend for SR and age group", age_group)) +
theme_minimal()
print(p) # print the plot
# Return the HP filter result
return(hp_result)
}
# Use lapply to apply this function to each age group
png(filename="C:/Users/141823/Documents/NAIRU/Images/SR.png")
SR_hp_list <- lapply(age_groups, get_SR_hpfilter_plot)
dev.off()
# Assign names to the list elements
names(SR_hp_list) <- age_groups
# Create filters - start with the Burger King filter (Baxter King dipshiz)
#### Generate secular unemployment rate implied
# Assume hp_results_list1 and hp_results_list2 are lists of Hodrick-Prescott filter results
# They should have the same names and the same length
# Create a function to calculate the ratio
calc_ratio <- function(age_group) {
trend1 <- SR_hp_list[[age_group]]$trend
trend2 <- JFR_hp_list[[age_group]]$trend
# Calculate the sum of the trends for each time period
trend_sum <- trend1 + trend2
# Calculate the ratio of the first trend to the sum
ratio <- trend1 / trend_sum
return(ratio)
}
# Use lapply to apply this function to each age group
ratio_list <- lapply(names(SR_hp_list), calc_ratio)
# Assign names to the list elements
names(ratio_list) <- names(SR_hp_list)
head(ratio_list)
SUR_ratio <- do.call("cbind", ratio_list) %>% data.frame() %>% mutate(date = unique(dfgf$date)) %>% mutate(UR = UR$UR) %>% pivot_longer(!date,names_to = "variable",values_to = "value")
png(filename="C:/Users/141823/Documents/NAIRU/Images/SUR.png")
ggplot(SUR_ratio,aes(x=date,y=value,colour=variable)) + geom_line() + geom_vline(xintercept = as.Date("2008-09-01")) + geom_vline(xintercept = as.Date("2020-03-01")) + geom_vline(xintercept = as.Date("2005-06-01"),linetype=2) + geom_vline(xintercept = as.Date("2018-06-01"),linetype=2)
dev.off()
#write_csv(SUR_ratio,"C:/Users/141823/Documents/NAIRU/Data/SUR.csv")
lfage[lfage$date == "2005-06-01",]
lfage[lfage$date == "2018-06-01",]
SUR_ratio[SUR_ratio$date== "2005-06-01",]
SUR_ratio[SUR_ratio$date== "2018-06-01",]
install.packages("pacman")
### Goal is to create a script that constructs trend separation and job finding rates.
# Clearing memory and setting up packages
rm(list=ls())
.libPaths(new = 'C:/Rpackage')
# source("https://trimweb.rba.gov.au/record/6808794")
# artifactory::setup_artifactory()
install.packages("pacman")
library(pacman)
p_load(
tidyverse,
data.table,
collapse,
readabs,
readr,
readxl,
mFilter,
zoo
)
# Pull in the gross flows data using readabs
# First do the current weights UR for a comparison
lfdf <- read_lfs_grossflows(weights = "current")
lf <- lfdf %>% filter(lfs_current %in% c("Employed full-time","Employed part-time","Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date) %>% summarise(number = sum(persons))
unemployed <- lfdf %>% filter(lfs_current %in% c("Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date) %>% summarise(number_une = sum(persons))
UR <- left_join(unemployed,lf,by="date") %>% mutate(UR = number_une/number)
ggplot(lf,aes(x=date,y=number)) + geom_line()
ggplot(UR,aes(x=date,y=UR)) + geom_line()
#write.csv(UR,"C:/Users/141823/Documents/NAIRU/Data/Current_data.csv")
lf_curr_age <- lfdf %>% filter(lfs_current %in% c("Employed full-time","Employed part-time","Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date,age) %>% summarise(number = sum(persons))
unemployed_curr_age <- lfdf %>% filter(lfs_current %in% c("Unemployed")) %>% filter(!age == "65 years and over") %>% group_by(date,age) %>% summarise(number_une = sum(persons))
UR_curr_age <- left_join(unemployed_curr_age,lf_curr_age,by=c("date","age")) %>% mutate(UR = number_une/number) %>% ungroup() %>% group_by(date) %>% mutate(total = sum(number),LF_share = number/total)
#write.csv(UR_curr_age,"C:/Users/141823/Documents/NAIRU/Data/Current_age_data.csv")
### Do a shift share analysis of raw unemployment rate between June 2005 and June 2018 - purpose of raw is that it is linearly decomposable
# [To be coded]
### Now use job flows data to look at trends and implied secular unemployment rate
# We have Full and Part-Time transitions as well as to NILF and unemployed. These counts are by date, age, state, and sex - allowing a decomposition of all of them using public data.
dfgf <- read_lfs_grossflows(weights = "previous")
# Dataset focused on the five year age groups only
gfage <- dfgf %>% filter(!age == "65 years and over") %>% mutate(age2 = case_when(
substr(age,1,5) %in% c("15-19","20-24") ~ "15-24",
substr(age,1,5) %in% c("25-29","30-34") ~ "25-34",
substr(age,1,5) %in% c("35-39","40-44") ~ "35-44",
substr(age,1,5) %in% c("45-49","50-54") ~ "45-54",
substr(age,1,5) %in% c("55-59","60-64") ~ "55-64",
)) %>% group_by(date,lfs_current,lfs_previous,age2) %>% summarise(number = sum(persons))
# Labour force shares, but using the same weights as the flows
lfage <- gfage %>% filter(lfs_current %in% c("Employed full-time","Employed part-time","Unemployed")) %>% group_by(date,age2) %>% summarise(number = sum(number), .groups = 'drop') %>% group_by(date) %>% mutate(total=sum(number),prop=number/total)
# Initial run dropping everything into two transitions - employed to unemployed
sepage <- gfage %>% ungroup() %>% mutate(Empcur = ifelse(substr(lfs_current,1,3) == "Emp",1,0),Emppre = ifelse(substr(lfs_previous,1,3) == "Emp",1,0),Unecur = ifelse(substr(lfs_current,1,3) == "Une",1,0),Unepre = ifelse(substr(lfs_previous,1,3) == "Une",1,0)) %>% filter(Emppre == 1) %>% mutate(l_curr = ifelse(Empcur == 1, "Employed",ifelse(Unecur == 1,"Unemployed","Other")),l_pre = ifelse(Emppre == 1, "Employed",ifelse(Unepre == 1,"Unemployed","Other"))) %>% group_by(date,l_pre,l_curr,age2) %>% summarise(number = sum(number))
# Get all the people who were previously employed - irrespective of where they transition
preemp_emp1 <- sepage %>% ungroup() %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preemp_totals <- sepage %>%
ungroup() %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preemp_emp <- bind_rows(preemp_emp1, preemp_totals)
preemp_emp <- preemp_emp %>% arrange(date, l_pre, age2)
setDT(preemp_emp)
# Get people previously employed who are now unemployed
preemp_une1 <- sepage %>% ungroup() %>% filter(l_curr == "Unemployed") %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preemp_utotals <- sepage %>%
ungroup() %>%
filter(l_curr == "Unemployed") %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preemp_une <- bind_rows(preemp_une1, preemp_utotals)
preemp_une <- preemp_une %>% arrange(date, l_pre, age2)
setDT(preemp_une)
preemp <- preemp_une[preemp_emp,on = .c("date","age2")] %>% mutate(sep_rate = number/i.number)
ggplot(preemp,aes(x=date,y=sep_rate,colour=age2)) + geom_line() + labs(title="Separation rate by age")
#write_csv(preemp,"C:/Users/141823/Documents/NAIRU/Data/SR_age.csv")
# Unemployed to employed.
jfage <- gfage %>% ungroup() %>% mutate(Empcur = ifelse(substr(lfs_current,1,3) == "Emp",1,0),Emppre = ifelse(substr(lfs_previous,1,3) == "Emp",1,0),Unecur = ifelse(substr(lfs_current,1,3) == "Une",1,0),Unepre = ifelse(substr(lfs_previous,1,3) == "Une",1,0)) %>% filter(Unepre == 1) %>% mutate(l_curr = ifelse(Empcur == 1, "Employed",ifelse(Unecur == 1,"Unemployed","Other")),l_pre = ifelse(Emppre == 1, "Employed",ifelse(Unepre == 1,"Unemployed","Other"))) %>% group_by(date,l_pre,l_curr,age2) %>% summarise(number = sum(number))
# Get all people who were previously unemployed
preune_une1 <- jfage %>% ungroup() %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preune_totals <- jfage %>%
ungroup() %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preune_une <- bind_rows(preune_une1, preune_totals)
preune_une <- preune_une %>% arrange(date, l_pre, age2)
setDT(preune_une)
# Get all people who were previously unemployed and became employed
preune_emp1 <- jfage %>% ungroup() %>% filter(l_curr == "Employed") %>% group_by(date,l_pre,age2) %>% summarise(number = sum(number))
preune_etotals <- jfage %>%
ungroup() %>%
filter(l_curr == "Employed") %>%
group_by(date, l_pre) %>%
summarise(age2 = "Total", number = sum(number), .groups = 'drop')
preune_emp <- bind_rows(preune_emp1, preune_etotals)
preune_emp <- preune_emp %>% arrange(date, l_pre, age2)
setDT(preune_emp)
preune <- preune_emp[preune_une,on = .c("date","age2")] %>% mutate(jf_rate = number/i.number)
ggplot(preune,aes(x=date,y=jf_rate,colour=age2)) + geom_line() + labs(title="Job-finding rate by age")
#write_csv(preune,"C:/Users/141823/Documents/NAIRU/Data/JFR_age.csv")
#### Generate Trends
## HP trends
age_groups <- unique(preune$age2)
# JFR HP trends
get_JFR_hpfilter_plot <- function(age_group) {
# Get the time series
ts_data <- ts(preune[preune$age2 == age_group,]$jf_rate, start = c(2003,6), frequency = 12)
# Apply the Hodrick-Prescott filter
hp_result <- hpfilter(ts_data, freq = 1600) # adjust freq parameter as necessary
# Plot the original series and trend
p <- ggplot() +
geom_line(aes(x = time(ts_data), y = ts_data), colour = "blue") +
geom_line(aes(x = time(hp_result$trend), y = hp_result$trend), colour = "red") +
labs(x = "Time", y = "Rate", title = paste("Original Series and HP Filter Trend for JFR age group", age_group)) +
theme_minimal()
print(p) # print the plot
# Return the HP filter result
return(hp_result)
}
# Use lapply to apply this function to each age group
#png(filename="C:/Users/141823/Documents/NAIRU/Images/JFR.png")
JFR_hp_list <- lapply(age_groups, get_JFR_hpfilter_plot)
#dev.off()
# Assign names to the list elements
names(JFR_hp_list) <- age_groups
# Sep rate HP
get_SR_hpfilter_plot <- function(age_group) {
# Get the time series
ts_data <- ts(preemp[preemp$age2 == age_group,]$sep_rate, start = c(2003,6), frequency = 12)
# Apply the Hodrick-Prescott filter
hp_result <- hpfilter(ts_data, freq = 1600) # adjust freq parameter as necessary
# Plot the original series and trend
p <- ggplot() +
geom_line(aes(x = time(ts_data), y = ts_data), colour = "blue") +
geom_line(aes(x = time(hp_result$trend), y = hp_result$trend), colour = "red") +
labs(x = "Time", y = "Rate", title = paste("Original Series and HP Filter Trend for SR and age group", age_group)) +
theme_minimal()
print(p) # print the plot
# Return the HP filter result
return(hp_result)
}
# Use lapply to apply this function to each age group
#png(filename="C:/Users/141823/Documents/NAIRU/Images/SR.png")
SR_hp_list <- lapply(age_groups, get_SR_hpfilter_plot)
#dev.off()
# Assign names to the list elements
names(SR_hp_list) <- age_groups
# Create filters - start with the Burger King filter (Baxter King dipshiz)
#### Generate secular unemployment rate implied
# Assume hp_results_list1 and hp_results_list2 are lists of Hodrick-Prescott filter results
# They should have the same names and the same length
# Create a function to calculate the ratio
calc_ratio <- function(age_group) {
trend1 <- SR_hp_list[[age_group]]$trend
trend2 <- JFR_hp_list[[age_group]]$trend
# Calculate the sum of the trends for each time period
trend_sum <- trend1 + trend2
# Calculate the ratio of the first trend to the sum
ratio <- trend1 / trend_sum
return(ratio)
}
# Use lapply to apply this function to each age group
ratio_list <- lapply(names(SR_hp_list), calc_ratio)
# Assign names to the list elements
names(ratio_list) <- names(SR_hp_list)
head(ratio_list)
SUR_ratio <- do.call("cbind", ratio_list) %>% data.frame() %>% mutate(date = unique(dfgf$date)) %>% mutate(UR = UR$UR) %>% pivot_longer(!date,names_to = "variable",values_to = "value")
#png(filename="C:/Users/141823/Documents/NAIRU/Images/SUR.png")
ggplot(SUR_ratio,aes(x=date,y=value,colour=variable)) + geom_line() + geom_vline(xintercept = as.Date("2008-09-01")) + geom_vline(xintercept = as.Date("2020-03-01")) + geom_vline(xintercept = as.Date("2005-06-01"),linetype=2) + geom_vline(xintercept = as.Date("2018-06-01"),linetype=2)
#dev.off()
#write_csv(SUR_ratio,"C:/Users/141823/Documents/NAIRU/Data/SUR.csv")
lfage[lfage$date == "2005-06-01",]
lfage[lfage$date == "2018-06-01",]
SUR_ratio[SUR_ratio$date== "2005-06-01",]
SUR_ratio[SUR_ratio$date== "2018-06-01",]
install.packages("pacman")
rm(list=ls())
.libPaths(new = 'C:/Rpackage')
#install.packages("pacman")
library(pacman)
p_load(
tidyverse,
data.table,
collapse,
readabs,
readxl,
theme61,
gsynth,
Synth
)
SCdata <- read_csv("SCdata.csv")[,1:8]
##### Raw levels
### Synth example
basedata <- as.data.frame(SCdata) %>% mutate(time_index = rep(seq(1,144,by=1),times=11))
balancecheck <- basedata %>% pivot_wider(names_from = age,values_from = N)
dataprep.out <-
dataprep(
basedata,
dependent = "N",
predictors = c("gender1ratio","NSWratio","VICratio","Queenratio","eduratio"),
time.predictors.prior = 1:72, #as.Date("2006-07-01"):as.Date("2012-06-01"),
unit.variable = "age",
time.variable = "time_index",
treatment.identifier = 21,
controls.identifier = c(22:28),
time.optimize.ssr = 1:72,
time.plot = 1:144 #as.Date("2006-07-01"):as.Date("2018-06-01")
)
synth.out <- synth(data.prep.obj = dataprep.out)
pdf("templevel.pdf")
path.plot(synth.out, dataprep.out)
abline(v   = 73,
lty = 2)
abline(v   = 85,
lty = 2)
dev.off()
pdf("templevelgap.pdf")
gaps.plot(synth.out, dataprep.out)
abline(v   = 73,
lty = 2)
abline(v   = 85,
lty = 2)
abline(h = -15000,
lty = 3)
dev.off()
## Below is only in SCtools now - which isn't working https://bcastanho.github.io/install_sctools
# install.packages(c("cvTools", "furrr", "stringr","ggplot2",
#                     "stats","dplyr","magrittr","purrr"))
library(devtools)
install_github('bcastanho/SCtools', repos =NULL, force = T)
library(SCtools)
placebos <- generate.placebos(dataprep.out, synth.out, Sigf.ipop = 3)
plot_placebos(placebos)
mspe.plot(placebos, discard.extreme = TRUE, mspe.limit = 1, plot.hist = TRUE)
### gsyth example
basedata
gbasedata <- basedata %>% mutate(treatment = ifelse(age == 21,1,0), post = ifelse(month_year >= "2012-07-01"))
gbasedata <- basedata %>% mutate(treatment = ifelse(age == 21,1,0), post = ifelse(month_year >= "2012-07-01",1,0))
gbasedata
